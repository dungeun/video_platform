// Video Platform Schema - Restructured for Video Content
// This schema is optimized for video streaming and content management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER & AUTHENTICATION
// ============================================

model users {
  id                    String                  @id
  email                 String                  @unique
  password              String
  name                  String
  type                  String                  @default("USER") // USER, CREATOR, ADMIN
  status                String                  @default("ACTIVE")
  verified              Boolean                 @default(false)
  emailVerified         Boolean                 @default(false)
  lastLogin             DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  // Relations
  profiles              profiles?
  channels              channels?
  videos                videos[]                @relation("VideoCreator")
  videoLikes           video_likes[]
  videoComments        video_comments[]
  watchHistory         watch_history[]
  subscriptions        subscriptions[]
  playlists            video_playlists[]
  premiumSubscription  premium_subscriptions?
  recommendations      video_recommendations[]
  notifications        notifications[]
  reports              reports[]
  
  @@index([email])
  @@index([type])
  @@index([status])
}

model profiles {
  id            String    @id
  userId        String    @unique
  bio           String?
  phone         String?
  address       String?
  birthDate     DateTime?
  gender        String?
  profileImage  String?
  coverImage    String?
  socialLinks   Json?     // {youtube, instagram, twitter, etc}
  interests     String[]  // Array of category slugs
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// ============================================
// CHANNEL & CREATOR
// ============================================

model channels {
  id                   String              @id
  userId               String              @unique
  name                 String
  handle               String              @unique
  description          String?
  bannerUrl            String?
  avatarUrl            String?
  isVerified           Boolean             @default(false)
  isPartner            Boolean             @default(false)
  subscriberCount      Int                 @default(0)
  videoCount           Int                 @default(0)
  totalViews           BigInt              @default(0)
  totalWatchTime       BigInt              @default(0) // in minutes
  totalRevenue         Float               @default(0)
  monthlyRevenue       Float               @default(0)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  
  // Relations
  user                 users               @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos               videos[]
  playlists            video_playlists[]
  subscribers          subscriptions[]
  liveStreams          live_streams[]
  
  @@index([handle])
  @@index([userId])
  @@index([isVerified])
  @@index([subscriberCount])
}

// ============================================
// VIDEO CONTENT
// ============================================

model videos {
  id                  String                @id
  channelId           String
  creatorId           String?               // Direct link to user
  title               String
  description         String?
  thumbnailUrl        String
  videoUrl            String
  duration            Int                   // in seconds
  viewCount           BigInt                @default(0)
  likeCount           Int                   @default(0)
  dislikeCount        Int                   @default(0)
  commentCount        Int                   @default(0)
  shareCount          Int                   @default(0)
  
  // Video Settings
  status              String                @default("processing") // processing, published, private, unlisted
  visibility          String                @default("public")     // public, private, unlisted, members
  isPremium           Boolean               @default(false)
  isFeatured          Boolean               @default(false)
  isShort             Boolean               @default(false)
  ageRestricted       Boolean               @default(false)
  commentsEnabled     Boolean               @default(true)
  likesVisible        Boolean               @default(true)
  
  // Metadata
  category            String?
  tags                String[]
  language            String                @default("ko")
  subtitleLanguages   String[]
  videoQuality        String                @default("1080p")
  fileSize            BigInt?
  
  // Monetization
  monetizationEnabled Boolean               @default(false)
  adRevenue           Float                 @default(0)
  estimatedRevenue    Float                 @default(0)
  
  // Timestamps
  publishedAt         DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  // Relations
  channel             channels              @relation(fields: [channelId], references: [id], onDelete: Cascade)
  creator             users?                @relation("VideoCreator", fields: [creatorId], references: [id])
  likes               video_likes[]
  comments            video_comments[]
  watchHistory        watch_history[]
  playlists           playlist_videos[]
  analytics           video_analytics[]
  featuredIn          featured_videos[]
  recommendations     video_recommendations[]
  
  @@index([channelId])
  @@index([category])
  @@index([status])
  @@index([publishedAt])
  @@index([viewCount])
  @@index([isPremium])
  @@index([isFeatured])
}

model video_categories {
  id            String              @id
  name          String
  slug          String              @unique
  description   String?
  icon          String?
  parentId      String?
  displayOrder  Int                 @default(0)
  isActive      Boolean             @default(true)
  videoCount    Int                 @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  parent        video_categories?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      video_categories[]  @relation("CategoryHierarchy")
  
  @@index([slug])
  @@index([parentId])
  @@index([isActive])
}

// ============================================
// PLAYLISTS
// ============================================

model video_playlists {
  id              String            @id
  channelId       String
  userId          String
  title           String
  description     String?
  thumbnailUrl    String?
  isPublic        Boolean           @default(true)
  videoCount      Int               @default(0)
  totalDuration   Int               @default(0)
  totalViews      BigInt            @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  channel         channels          @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user            users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos          playlist_videos[]
  
  @@index([channelId])
  @@index([userId])
  @@index([isPublic])
}

model playlist_videos {
  id          String          @id
  playlistId  String
  videoId     String
  position    Int
  addedAt     DateTime        @default(now())
  
  playlist    video_playlists @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video       videos          @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@unique([playlistId, videoId])
  @@unique([playlistId, position])
  @@index([playlistId])
  @@index([videoId])
}

// ============================================
// USER INTERACTIONS
// ============================================

model video_likes {
  id        String    @id
  videoId   String
  userId    String
  isLike    Boolean   @default(true) // true for like, false for dislike
  createdAt DateTime  @default(now())
  
  video     videos    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user      users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([videoId, userId])
  @@index([videoId])
  @@index([userId])
}

model video_comments {
  id          String    @id
  videoId     String
  userId      String
  parentId    String?   // For replies
  content     String
  likeCount   Int       @default(0)
  isPinned    Boolean   @default(false)
  isHearted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  video       videos    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user        users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      video_comments?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     video_comments[] @relation("CommentReplies")
  
  @@index([videoId])
  @@index([userId])
  @@index([parentId])
}

model watch_history {
  id            String    @id
  userId        String
  videoId       String
  watchedAt     DateTime  @default(now())
  watchDuration Int       @default(0) // seconds watched
  lastPosition  Int       @default(0) // last watched position in seconds
  completed     Boolean   @default(false)
  
  user          users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video         videos    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
  @@index([watchedAt])
}

model subscriptions {
  id              String    @id
  userId          String
  channelId       String
  tier            String    @default("free") // free, member, vip
  notificationsOn Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel         channels  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  @@unique([userId, channelId])
  @@index([userId])
  @@index([channelId])
}

// ============================================
// PREMIUM & MONETIZATION
// ============================================

model premium_subscriptions {
  id            String    @id
  userId        String    @unique
  planType      String    // basic, standard, premium
  price         Float
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean   @default(true)
  autoRenew     Boolean   @default(true)
  paymentMethod String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isActive])
  @@index([endDate])
}

// ============================================
// ANALYTICS & RECOMMENDATIONS
// ============================================

model video_analytics {
  id                String    @id
  videoId           String
  date              DateTime  @db.Date
  views             Int       @default(0)
  uniqueViewers     Int       @default(0)
  watchTimeMinutes  Int       @default(0)
  avgViewDuration   Int       @default(0)
  likes             Int       @default(0)
  dislikes          Int       @default(0)
  comments          Int       @default(0)
  shares            Int       @default(0)
  subscriberGained  Int       @default(0)
  subscriberLost    Int       @default(0)
  estimatedRevenue  Float     @default(0)
  clickThroughRate  Float     @default(0)
  createdAt         DateTime  @default(now())
  
  video             videos    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@unique([videoId, date])
  @@index([videoId])
  @@index([date])
}

model video_recommendations {
  id          String    @id
  userId      String
  videoId     String
  score       Float
  reason      String?   // trending, similar_watched, subscribed_channel, category_interest
  isShown     Boolean   @default(false)
  isClicked   Boolean   @default(false)
  shownAt     DateTime?
  clickedAt   DateTime?
  createdAt   DateTime  @default(now())
  
  user        users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video       videos    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([videoId])
  @@index([score])
  @@index([isShown])
}

model featured_videos {
  id          String    @id
  videoId     String
  section     String    // home, trending, recommended, premium
  displayOrder Int      @default(0)
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  video       videos    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@index([videoId])
  @@index([section])
  @@index([isActive])
}

// ============================================
// LIVE STREAMING
// ============================================

model live_streams {
  id              String    @id
  channelId       String
  title           String
  description     String?
  thumbnailUrl    String?
  streamKey       String    @unique
  streamUrl       String?
  status          String    @default("scheduled") // scheduled, live, ended
  viewerCount     Int       @default(0)
  peakViewers     Int       @default(0)
  totalViews      BigInt    @default(0)
  scheduledStart  DateTime?
  actualStart     DateTime?
  actualEnd       DateTime?
  isRecording     Boolean   @default(true)
  recordingUrl    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  channel         channels  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  @@index([channelId])
  @@index([status])
  @@index([streamKey])
}

// ============================================
// YOUTUBE INTEGRATION
// ============================================

model youtube_videos {
  id              String    @id
  youtubeId       String    @unique
  youtubeUrl      String
  title           String
  description     String?
  thumbnailUrl    String
  channelTitle    String
  channelId       String?
  duration        String?
  viewCount       BigInt    @default(0)
  likeCount       Int       @default(0)
  commentCount    Int       @default(0)
  publishedAt     DateTime
  tags            String?
  category        String?
  embedHtml       String?
  assignedUserId  String?
  assignedAt      DateTime?
  importedBy      String
  importedAt      DateTime  @default(now())
  featured        Boolean   @default(false)
  displayOrder    Int       @default(0)
  isPremium       Boolean   @default(false)
  revenueShare    Float     @default(55.00)
  totalRevenue    Float     @default(0)
  status          String    @default("active")
  notes           String?
  
  @@index([youtubeId])
  @@index([featured])
  @@index([assignedUserId])
  @@index([category])
}

// ============================================
// NOTIFICATIONS & REPORTS
// ============================================

model notifications {
  id          String    @id
  userId      String
  type        String    // new_video, comment, like, subscription, etc
  title       String
  message     String
  data        Json?
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  user        users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model reports {
  id          String    @id
  reporterId  String
  targetType  String    // video, comment, channel, user
  targetId    String
  reason      String
  description String?
  status      String    @default("pending") // pending, reviewing, resolved, rejected
  resolvedAt  DateTime?
  resolvedBy  String?
  resolution  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  reporter    users     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  
  @@index([reporterId])
  @@index([targetType, targetId])
  @@index([status])
}

// ============================================
// SITE CONFIGURATION
// ============================================

model site_config {
  id        String   @id
  key       String   @unique
  value     String   // JSON string
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  
  @@index([key])
}