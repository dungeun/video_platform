'use client'

import { useState } from 'react'
import PageLayout from '@/components/layouts/PageLayout'
import { useAuth } from '@/hooks/useAuth'
import { 
  Settings, User, Bell, Shield, Palette, Globe, 
  Volume2, Eye, Smartphone, Monitor, Save, 
  LogOut, Trash2, Download
} from 'lucide-react'

const settingsCategories = [
  { id: 'profile', label: 'ÌîÑÎ°úÌïÑ', icon: User },
  { id: 'notifications', label: 'ÏïåÎ¶º', icon: Bell },
  { id: 'privacy', label: 'Í∞úÏù∏Ï†ïÎ≥¥', icon: Shield },
  { id: 'appearance', label: 'ÌôîÎ©¥ ÏÑ§Ï†ï', icon: Palette },
  { id: 'language', label: 'Ïñ∏Ïñ¥', icon: Globe },
  { id: 'playback', label: 'Ïû¨ÏÉù ÏÑ§Ï†ï', icon: Volume2 },
  { id: 'data', label: 'Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨', icon: Download }
]

export default function SettingsPage() {
  const { user, isAuthenticated } = useAuth()
  const [activeCategory, setActiveCategory] = useState('profile')
  const [settings, setSettings] = useState({
    // ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï
    displayName: user?.name || '',
    bio: '',
    website: '',
    location: '',
    
    // ÏïåÎ¶º ÏÑ§Ï†ï
    emailNotifications: true,
    pushNotifications: true,
    liveNotifications: true,
    commentNotifications: true,
    likeNotifications: false,
    
    // Í∞úÏù∏Ï†ïÎ≥¥ ÏÑ§Ï†ï
    profileVisibility: 'public',
    showEmail: false,
    showSubscriptions: true,
    allowMessages: true,
    
    // ÌôîÎ©¥ ÏÑ§Ï†ï
    theme: 'dark',
    autoplay: true,
    hdDefault: true,
    captions: false,
    
    // Ïñ∏Ïñ¥ ÏÑ§Ï†ï
    language: 'ko',
    
    // Ïû¨ÏÉù ÏÑ§Ï†ï
    volume: 80,
    playbackSpeed: 1.0,
    autoplayNext: true,
    
    // Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨
    downloadQuality: 'hd',
    offlineDownloads: false
  })

  const handleSettingChange = (key: string, value: any) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }))
  }

  const handleSaveSettings = () => {
    // ÏÑ§Ï†ï Ï†ÄÏû• Î°úÏßÅ
    console.log('Settings saved:', settings)
    alert('ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!')
  }

  const renderSettingsContent = () => {
    switch (activeCategory) {
      case 'profile':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-white mb-6">ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  ÌëúÏãú Ïù¥Î¶Ñ
                </label>
                <input
                  type="text"
                  value={settings.displayName}
                  onChange={(e) => handleSettingChange('displayName', e.target.value)}
                  className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  ÏúÑÏπò
                </label>
                <input
                  type="text"
                  value={settings.location}
                  onChange={(e) => handleSettingChange('location', e.target.value)}
                  placeholder="Ïòà: ÏÑúÏö∏, ÎåÄÌïúÎØºÍµ≠"
                  className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                ÏÜåÍ∞ú
              </label>
              <textarea
                value={settings.bio}
                onChange={(e) => handleSettingChange('bio', e.target.value)}
                placeholder="ÏûêÏã†ÏùÑ ÏÜåÍ∞úÌï¥Î≥¥ÏÑ∏Ïöî..."
                rows={4}
                className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                ÏõπÏÇ¨Ïù¥Ìä∏
              </label>
              <input
                type="url"
                value={settings.website}
                onChange={(e) => handleSettingChange('website', e.target.value)}
                placeholder="https://example.com"
                className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
              />
            </div>
          </div>
        )
        
      case 'notifications':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-white mb-6">ÏïåÎ¶º ÏÑ§Ï†ï</h2>
            
            <div className="space-y-4">
              {[
                { key: 'emailNotifications', label: 'Ïù¥Î©îÏùº ÏïåÎ¶º', desc: 'Ï§ëÏöîÌïú ÏóÖÎç∞Ïù¥Ìä∏Î•º Ïù¥Î©îÏùºÎ°ú Î∞õÏäµÎãàÎã§' },
                { key: 'pushNotifications', label: 'Ìë∏Ïãú ÏïåÎ¶º', desc: 'Î∏åÎùºÏö∞Ï†Ä Ìë∏Ïãú ÏïåÎ¶ºÏùÑ Î∞õÏäµÎãàÎã§' },
                { key: 'liveNotifications', label: 'ÎùºÏù¥Î∏å ÏïåÎ¶º', desc: 'Íµ¨ÎèÖÌïú Ï±ÑÎÑêÏùò ÎùºÏù¥Î∏å ÏãúÏûë Ïãú ÏïåÎ¶º' },
                { key: 'commentNotifications', label: 'ÎåìÍ∏Ä ÏïåÎ¶º', desc: 'ÎÇ¥ ÏòÅÏÉÅÏóê ÎåìÍ∏ÄÏù¥ Îã¨Î¶¥ Îïå ÏïåÎ¶º' },
                { key: 'likeNotifications', label: 'Ï¢ãÏïÑÏöî ÏïåÎ¶º', desc: 'ÎÇ¥ ÏòÅÏÉÅÏóê Ï¢ãÏïÑÏöîÍ∞Ä ÎàåÎ¶¥ Îïå ÏïåÎ¶º' }
              ].map(({ key, label, desc }) => (
                <div key={key} className="flex items-center justify-between p-4 bg-gray-800 rounded-lg">
                  <div>
                    <h3 className="text-white font-medium">{label}</h3>
                    <p className="text-gray-400 text-sm">{desc}</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings[key as keyof typeof settings] as boolean}
                      onChange={(e) => handleSettingChange(key, e.target.checked)}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>
              ))}
            </div>
          </div>
        )
        
      case 'privacy':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-white mb-6">Í∞úÏù∏Ï†ïÎ≥¥ ÏÑ§Ï†ï</h2>
            
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  ÌîÑÎ°úÌïÑ Í≥µÍ∞ú Î≤îÏúÑ
                </label>
                <select
                  value={settings.profileVisibility}
                  onChange={(e) => handleSettingChange('profileVisibility', e.target.value)}
                  className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                >
                  <option value="public">Í≥µÍ∞ú</option>
                  <option value="followers">ÌåîÎ°úÏõåÎßå</option>
                  <option value="private">ÎπÑÍ≥µÍ∞ú</option>
                </select>
              </div>
              
              <div className="space-y-4">
                {[
                  { key: 'showEmail', label: 'Ïù¥Î©îÏùº Ï£ºÏÜå Í≥µÍ∞ú', desc: 'Îã§Î•∏ ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÇ¥ Ïù¥Î©îÏùºÏùÑ Î≥º Ïàò ÏûàÏäµÎãàÎã§' },
                  { key: 'showSubscriptions', label: 'Íµ¨ÎèÖ Î™©Î°ù Í≥µÍ∞ú', desc: 'Îã§Î•∏ ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÇ¥ Íµ¨ÎèÖ Î™©Î°ùÏùÑ Î≥º Ïàò ÏûàÏäµÎãàÎã§' },
                  { key: 'allowMessages', label: 'Î©îÏãúÏßÄ ÌóàÏö©', desc: 'Îã§Î•∏ ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÇòÏóêÍ≤å Î©îÏãúÏßÄÎ•º Î≥¥ÎÇº Ïàò ÏûàÏäµÎãàÎã§' }
                ].map(({ key, label, desc }) => (
                  <div key={key} className="flex items-center justify-between p-4 bg-gray-800 rounded-lg">
                    <div>
                      <h3 className="text-white font-medium">{label}</h3>
                      <p className="text-gray-400 text-sm">{desc}</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings[key as keyof typeof settings] as boolean}
                        onChange={(e) => handleSettingChange(key, e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )
        
      case 'appearance':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-white mb-6">ÌôîÎ©¥ ÏÑ§Ï†ï</h2>
            
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  ÌÖåÎßà
                </label>
                <div className="grid grid-cols-3 gap-3">
                  {[
                    { value: 'light', label: 'ÎùºÏù¥Ìä∏', icon: '‚òÄÔ∏è' },
                    { value: 'dark', label: 'Îã§ÌÅ¨', icon: 'üåô' },
                    { value: 'auto', label: 'ÏûêÎèô', icon: '‚öôÔ∏è' }
                  ].map(({ value, label, icon }) => (
                    <button
                      key={value}
                      onClick={() => handleSettingChange('theme', value)}
                      className={`p-4 rounded-lg border-2 transition-colors ${
                        settings.theme === value
                          ? 'border-blue-500 bg-blue-500/10'
                          : 'border-gray-600 bg-gray-800 hover:border-gray-500'
                      }`}
                    >
                      <div className="text-2xl mb-2">{icon}</div>
                      <div className="text-white text-sm">{label}</div>
                    </button>
                  ))}
                </div>
              </div>
              
              <div className="space-y-4">
                {[
                  { key: 'autoplay', label: 'ÏûêÎèô Ïû¨ÏÉù', desc: 'ÏòÅÏÉÅÏùÑ ÏûêÎèôÏúºÎ°ú Ïû¨ÏÉùÌï©ÎãàÎã§' },
                  { key: 'hdDefault', label: 'HD Í∏∞Î≥∏ ÏÑ§Ï†ï', desc: 'Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Í≥†ÌôîÏßàÎ°ú Ïû¨ÏÉùÌï©ÎãàÎã§' },
                  { key: 'captions', label: 'ÏûêÎßâ ÌëúÏãú', desc: 'ÏûêÎßâÏù¥ ÏûàÎäî ÏòÅÏÉÅÏóêÏÑú ÏûêÎßâÏùÑ ÌëúÏãúÌï©ÎãàÎã§' }
                ].map(({ key, label, desc }) => (
                  <div key={key} className="flex items-center justify-between p-4 bg-gray-800 rounded-lg">
                    <div>
                      <h3 className="text-white font-medium">{label}</h3>
                      <p className="text-gray-400 text-sm">{desc}</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings[key as keyof typeof settings] as boolean}
                        onChange={(e) => handleSettingChange(key, e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )
        
      case 'language':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-white mb-6">Ïñ∏Ïñ¥ ÏÑ§Ï†ï</h2>
            
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                ÌëúÏãú Ïñ∏Ïñ¥
              </label>
              <select
                value={settings.language}
                onChange={(e) => handleSettingChange('language', e.target.value)}
                className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
              >
                <option value="ko">ÌïúÍµ≠Ïñ¥</option>
                <option value="en">English</option>
                <option value="ja">Êó•Êú¨Ë™û</option>
                <option value="zh">‰∏≠Êñá</option>
              </select>
            </div>
          </div>
        )
        
      case 'playback':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-white mb-6">Ïû¨ÏÉù ÏÑ§Ï†ï</h2>
            
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Î≥ºÎ•®: {settings.volume}%
                </label>
                <input
                  type="range"
                  min="0"
                  max="100"
                  value={settings.volume}
                  onChange={(e) => handleSettingChange('volume', parseInt(e.target.value))}
                  className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Ïû¨ÏÉù ÏÜçÎèÑ
                </label>
                <select
                  value={settings.playbackSpeed}
                  onChange={(e) => handleSettingChange('playbackSpeed', parseFloat(e.target.value))}
                  className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                >
                  <option value={0.25}>0.25x</option>
                  <option value={0.5}>0.5x</option>
                  <option value={0.75}>0.75x</option>
                  <option value={1.0}>1.0x (Í∏∞Î≥∏)</option>
                  <option value={1.25}>1.25x</option>
                  <option value={1.5}>1.5x</option>
                  <option value={1.75}>1.75x</option>
                  <option value={2.0}>2.0x</option>
                </select>
              </div>
              
              <div className="flex items-center justify-between p-4 bg-gray-800 rounded-lg">
                <div>
                  <h3 className="text-white font-medium">Îã§Ïùå ÏòÅÏÉÅ ÏûêÎèô Ïû¨ÏÉù</h3>
                  <p className="text-gray-400 text-sm">ÌòÑÏû¨ ÏòÅÏÉÅÏù¥ ÎÅùÎÇòÎ©¥ Îã§Ïùå ÏòÅÏÉÅÏùÑ ÏûêÎèôÏúºÎ°ú Ïû¨ÏÉùÌï©ÎãàÎã§</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={settings.autoplayNext}
                    onChange={(e) => handleSettingChange('autoplayNext', e.target.checked)}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
            </div>
          </div>
        )
        
      case 'data':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-white mb-6">Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨</h2>
            
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Îã§Ïö¥Î°úÎìú ÌíàÏßà
                </label>
                <select
                  value={settings.downloadQuality}
                  onChange={(e) => handleSettingChange('downloadQuality', e.target.value)}
                  className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                >
                  <option value="sd">SD (480p)</option>
                  <option value="hd">HD (720p)</option>
                  <option value="fhd">Full HD (1080p)</option>
                  <option value="4k">4K (2160p)</option>
                </select>
              </div>
              
              <div className="flex items-center justify-between p-4 bg-gray-800 rounded-lg">
                <div>
                  <h3 className="text-white font-medium">Ïò§ÌîÑÎùºÏù∏ Îã§Ïö¥Î°úÎìú</h3>
                  <p className="text-gray-400 text-sm">ÏòÅÏÉÅÏùÑ Îã§Ïö¥Î°úÎìúÌïòÏó¨ Ïò§ÌîÑÎùºÏù∏ÏóêÏÑú ÏãúÏ≤≠Ìï† Ïàò ÏûàÏäµÎãàÎã§</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={settings.offlineDownloads}
                    onChange={(e) => handleSettingChange('offlineDownloads', e.target.checked)}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
              
              <div className="bg-gray-800 rounded-lg p-6">
                <h3 className="text-white font-medium mb-4">Í≥ÑÏ†ï Í¥ÄÎ¶¨</h3>
                <div className="space-y-3">
                  <button className="w-full bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center justify-center gap-2">
                    <Download className="w-4 h-4" />
                    ÎÇ¥ Îç∞Ïù¥ÌÑ∞ Îã§Ïö¥Î°úÎìú
                  </button>
                  <button className="w-full bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center justify-center gap-2">
                    <LogOut className="w-4 h-4" />
                    Í≥ÑÏ†ï Î°úÍ∑∏ÏïÑÏõÉ
                  </button>
                  <button className="w-full bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center justify-center gap-2">
                    <Trash2 className="w-4 h-4" />
                    Í≥ÑÏ†ï ÏÇ≠Ï†ú
                  </button>
                </div>
              </div>
            </div>
          </div>
        )
        
      default:
        return null
    }
  }

  if (!isAuthenticated) {
    return (
      <PageLayout>
        <div className="min-h-screen bg-gray-900 text-white flex items-center justify-center">
          <div className="text-center">
            <div className="w-20 h-20 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
              <Settings className="w-10 h-10 text-gray-400" />
            </div>
            <h1 className="text-2xl font-bold mb-4">Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§</h1>
            <p className="text-gray-400">ÏÑ§Ï†ï ÌéòÏù¥ÏßÄÏóê Ï†ëÍ∑ºÌïòÎ†§Î©¥ Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.</p>
          </div>
        </div>
      </PageLayout>
    )
  }

  return (
    <PageLayout>
      <div className="min-h-screen bg-gray-900 text-white">
        <div className="container mx-auto px-4 py-8">
          {/* Ìó§Îçî */}
          <div className="mb-8">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                <Settings className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold">‚öôÔ∏è ÏÑ§Ï†ï</h1>
                <p className="text-gray-400">Í≥ÑÏ†ïÍ≥º Ïï± ÏÑ§Ï†ïÏùÑ Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî</p>
              </div>
            </div>
          </div>

          <div className="flex flex-col lg:flex-row gap-8">
            {/* ÏÇ¨Ïù¥ÎìúÎ∞î */}
            <div className="lg:w-64 flex-shrink-0">
              <div className="bg-gray-800 rounded-lg p-4">
                <nav className="space-y-2">
                  {settingsCategories.map((category) => {
                    const IconComponent = category.icon
                    return (
                      <button
                        key={category.id}
                        onClick={() => setActiveCategory(category.id)}
                        className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg text-left transition-colors ${
                          activeCategory === category.id
                            ? 'bg-blue-600 text-white'
                            : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                        }`}
                      >
                        <IconComponent className="w-5 h-5" />
                        {category.label}
                      </button>
                    )
                  })}
                </nav>
              </div>
            </div>

            {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
            <div className="flex-1">
              <div className="bg-gray-800 rounded-lg p-6">
                {renderSettingsContent()}
                
                {/* Ï†ÄÏû• Î≤ÑÌäº */}
                <div className="flex justify-end mt-8 pt-6 border-t border-gray-700">
                  <button
                    onClick={handleSaveSettings}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors flex items-center gap-2"
                  >
                    <Save className="w-4 h-4" />
                    ÏÑ§Ï†ï Ï†ÄÏû•
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </PageLayout>
  )
}