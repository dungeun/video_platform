'use client'

import React, { useState, useEffect } from 'react'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/Button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import VideoUpload from './VideoUpload'
import VideoThumbnails from './VideoThumbnails'

interface Video {
  id: string
  title: string
  description: string
  thumbnailUrl: string
  duration: number
  fileSize: number
  width: number
  height: number
  status: string
  createdAt: string
  viewCount: number
  hlsUrl?: string
}

export default function StudioVideoManagement() {
  const [videos, setVideos] = useState<Video[]>([])
  const [loading, setLoading] = useState(true)
  const [selectedVideo, setSelectedVideo] = useState<Video | null>(null)

  // 비디오 목록 불러오기
  useEffect(() => {
    fetchVideos()
  }, [])

  const fetchVideos = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/videos/my-videos', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        setVideos(data.videos || [])
      }
    } catch (error) {
      console.error('Failed to fetch videos:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleUploadComplete = (newVideo: Video) => {
    setVideos(prev => [newVideo, ...prev])
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'PUBLISHED': return 'bg-green-100 text-green-800'
      case 'PROCESSING': return 'bg-yellow-100 text-yellow-800' 
      case 'DRAFT': return 'bg-gray-100 text-gray-800'
      case 'FAILED': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case 'PUBLISHED': return '게시됨'
      case 'PROCESSING': return '처리 중'
      case 'DRAFT': return '임시저장'
      case 'FAILED': return '실패'
      default: return status
    }
  }

  return (
    <div className="space-y-6">
      <Tabs defaultValue="upload" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="upload">동영상 업로드</TabsTrigger>
          <TabsTrigger value="manage">내 동영상</TabsTrigger>
          <TabsTrigger value="analytics">분석</TabsTrigger>
        </TabsList>

        {/* 업로드 탭 */}
        <TabsContent value="upload" className="space-y-6">
          <VideoUpload onUploadComplete={handleUploadComplete} />
        </TabsContent>

        {/* 동영상 관리 탭 */}
        <TabsContent value="manage" className="space-y-6">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold">내 동영상 ({videos.length})</h2>
            <Button onClick={fetchVideos} variant="outline">
              새로고침
            </Button>
          </div>

          {loading ? (
            <Card className="p-8 text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
              <p className="mt-2 text-gray-600">동영상 목록을 불러오는 중...</p>
            </Card>
          ) : videos.length === 0 ? (
            <Card className="p-8 text-center">
              <div className="text-gray-400 mb-4">
                <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                </svg>
              </div>
              <h3 className="text-lg font-medium text-gray-700 mb-2">아직 업로드한 동영상이 없습니다</h3>
              <p className="text-gray-500 mb-4">첫 번째 동영상을 업로드해보세요!</p>
              <Button onClick={() => {
                const uploadTab = document.querySelector('[value="upload"]') as HTMLElement
                uploadTab?.click()
              }}>
                동영상 업로드하기
              </Button>
            </Card>
          ) : (
            <div className="grid gap-4">
              {videos.map((video) => (
                <Card key={video.id} className="p-6">
                  <div className="grid md:grid-cols-4 gap-6">
                    {/* 썸네일 */}
                    <div className="md:col-span-1">
                      <VideoThumbnails
                        videoId={video.id}
                        currentThumbnail={video.thumbnailUrl}
                        editable={false}
                      />
                    </div>

                    {/* 비디오 정보 */}
                    <div className="md:col-span-2">
                      <div className="space-y-3">
                        <div>
                          <h3 className="text-lg font-semibold text-gray-900 line-clamp-2">
                            {video.title}
                          </h3>
                          {video.description && (
                            <p className="text-gray-600 text-sm mt-1 line-clamp-2">
                              {video.description}
                            </p>
                          )}
                        </div>

                        <div className="flex items-center gap-4 text-sm text-gray-600">
                          <span>👁️ {video.viewCount || 0}회 재생</span>
                          <span>⏱️ {formatDuration(video.duration)}</span>
                          <span>📁 {formatFileSize(video.fileSize)}</span>
                          <span>🎥 {video.width} x {video.height}</span>
                        </div>

                        <div className="flex items-center gap-2">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(video.status)}`}>
                            {getStatusText(video.status)}
                          </span>
                          <span className="text-sm text-gray-500">
                            {new Date(video.createdAt).toLocaleDateString('ko-KR')}
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* 액션 버튼 */}
                    <div className="md:col-span-1 flex flex-col gap-2">
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => setSelectedVideo(video)}
                      >
                        편집
                      </Button>
                      
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => {
                          if (video.hlsUrl) {
                            window.open(`/watch/${video.id}`, '_blank')
                          }
                        }}
                        disabled={!video.hlsUrl}
                      >
                        미리보기
                      </Button>
                      
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => {
                          navigator.clipboard.writeText(`${window.location.origin}/watch/${video.id}`)
                          alert('링크가 복사되었습니다!')
                        }}
                      >
                        링크 복사
                      </Button>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>

        {/* 분석 탭 */}
        <TabsContent value="analytics" className="space-y-6">
          <Card className="p-6">
            <h3 className="text-lg font-semibold mb-4">채널 통계</h3>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="bg-blue-50 p-4 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">{videos.length}</div>
                <div className="text-sm text-blue-700">총 동영상</div>
              </div>
              
              <div className="bg-green-50 p-4 rounded-lg">
                <div className="text-2xl font-bold text-green-600">
                  {videos.reduce((sum, v) => sum + (v.viewCount || 0), 0)}
                </div>
                <div className="text-sm text-green-700">총 재생 수</div>
              </div>
              
              <div className="bg-purple-50 p-4 rounded-lg">
                <div className="text-2xl font-bold text-purple-600">
                  {formatFileSize(videos.reduce((sum, v) => sum + v.fileSize, 0))}
                </div>
                <div className="text-sm text-purple-700">총 용량</div>
              </div>
              
              <div className="bg-orange-50 p-4 rounded-lg">
                <div className="text-2xl font-bold text-orange-600">
                  {Math.floor(videos.reduce((sum, v) => sum + v.duration, 0) / 60)}분
                </div>
                <div className="text-sm text-orange-700">총 재생 시간</div>
              </div>
            </div>
          </Card>

          <Card className="p-6">
            <h3 className="text-lg font-semibold mb-4">최근 업로드</h3>
            <div className="space-y-3">
              {videos.slice(0, 5).map((video) => (
                <div key={video.id} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                  <div className="w-16 h-12 bg-gray-200 rounded flex-shrink-0">
                    <VideoThumbnails
                      videoId={video.id}
                      currentThumbnail={video.thumbnailUrl}
                      editable={false}
                    />
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium text-sm">{video.title}</h4>
                    <p className="text-xs text-gray-600">
                      {new Date(video.createdAt).toLocaleDateString('ko-KR')} • {video.viewCount || 0}회 재생
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </Card>
        </TabsContent>
      </Tabs>

      {/* 비디오 편집 모달 */}
      {selectedVideo && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold">동영상 편집</h2>
                <Button 
                  variant="outline" 
                  onClick={() => setSelectedVideo(null)}
                >
                  닫기
                </Button>
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                {/* 비디오 정보 편집 */}
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      제목
                    </label>
                    <input
                      type="text"
                      defaultValue={selectedVideo.title}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      설명
                    </label>
                    <textarea
                      defaultValue={selectedVideo.description}
                      rows={6}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      카테고리
                    </label>
                    <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                      <option value="general">일반</option>
                      <option value="entertainment">엔터테인먼트</option>
                      <option value="education">교육</option>
                      <option value="gaming">게임</option>
                      <option value="music">음악</option>
                      <option value="sports">스포츠</option>
                      <option value="tech">기술</option>
                    </select>
                  </div>
                </div>

                {/* 썸네일 편집 */}
                <div>
                  <VideoThumbnails
                    videoId={selectedVideo.id}
                    currentThumbnail={selectedVideo.thumbnailUrl}
                    editable={true}
                    onThumbnailSelect={(thumbnail) => {
                      console.log('Selected thumbnail:', thumbnail)
                    }}
                  />
                </div>
              </div>

              <div className="flex justify-end gap-2 mt-6 pt-6 border-t">
                <Button variant="outline" onClick={() => setSelectedVideo(null)}>
                  취소
                </Button>
                <Button>
                  저장
                </Button>
              </div>
            </div>
          </Card>
        </div>
      )}
    </div>
  )
}